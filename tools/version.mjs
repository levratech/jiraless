#!/usr/bin/env node
/**
 * Jiraless - UI Version Bumper
 * - Increments patch version in ui/package.json
 * - Generates ui/src/version.ts with APP_VERSION and BUILD_TIME
 * - Writes ui/public/version.json
 *
 * Behavior:
 * - Bumps PATCH by default (major.minor.PATCH+stamp)
 * - Stamp = UTC YYYYMMDD.HHmm
 * - If VERSION_BUMP=none, do not bump package.json; still generate version.ts
 */
import fs from "fs/promises";
import path from "path";

const UI_DIR = "ui";
const PKG = path.join(UI_DIR, "package.json");
const VERSION_TS = path.join(UI_DIR, "src/version.ts");
const VERSION_JSON = path.join(UI_DIR, "public/version.json");

function stampUTC() {
  const d = new Date();
  const pad = (n) => String(n).padStart(2, "0");
  return (
    d.getUTCFullYear() +
    pad(d.getUTCMonth() + 1) +
    pad(d.getUTCDate()) +
    "." +
    pad(d.getUTCHours()) +
    pad(d.getUTCMinutes())
  );
}

function bumpPatch(v) {
  // semver-ish: a.b.c[-prerelease][+meta] -> bump c
  const core = v.split("-")[0].split("+")[0];
  const [maj, min, pat] = core.split(".").map((x) => parseInt(x, 10) || 0);
  return `${maj}.${min}.${(pat ?? 0) + 1}`;
}

async function writeIfChanged(file, content) {
  try {
    const prev = await fs.readFile(file, "utf8");
    if (prev === content) return false;
  } catch {}
  await fs.mkdir(path.dirname(file), { recursive: true });
  await fs.writeFile(file, content, "utf8");
  return true;
}

async function main() {
  const bumpMode = process.env.VERSION_BUMP || "patch"; // 'patch' | 'none'
  const pkgRaw = await fs.readFile(PKG, "utf8");
  const pkg = JSON.parse(pkgRaw);

  let newVersion = pkg.version || "0.0.0";
  if (bumpMode !== "none") {
    newVersion = bumpPatch(newVersion);
    pkg.version = newVersion;
    await fs.writeFile(PKG, JSON.stringify(pkg, null, 2) + "\n", "utf8");
    console.log("Bumped ui/package.json version to", newVersion);
  } else {
    console.log("VERSION_BUMP=none â†’ not bumping ui/package.json; using", newVersion);
  }

  const stamp = stampUTC();
  const appVersion = `${newVersion}+${stamp}`;

  // version.ts for import in UI
  const ts = `// Auto-generated by tools/version.mjs
export const APP_VERSION = ${JSON.stringify(appVersion)};
export const BUILD_TIME_UTC = ${JSON.stringify(stamp)};
`;
  await writeIfChanged(VERSION_TS, ts);

  // version.json for external checks
  const vjson = JSON.stringify(
    { version: appVersion, package: newVersion, built_utc: stamp },
    null,
    2
  );
  await writeIfChanged(VERSION_JSON, vjson);

  console.log("Wrote", VERSION_TS, "and", VERSION_JSON);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});